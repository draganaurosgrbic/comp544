class IntListTest extends TestCase {

  /**
   test boolean contains(int key) function
   */
  void testContains() {
    assertFalse("contains 0 = False", IntList.EMPTY.contains(0));
    assertFalse("contains 0 = False", IntList.EMPTY.cons(1).contains(0));
    assertTrue("contains 1 = True", IntList.EMPTY.cons(1).contains(1));
    assertFalse("contains 0 = False", IntList.EMPTY.cons(1).cons(2).contains(0));
    assertTrue("contains 1 = True", IntList.EMPTY.cons(1).cons(2).contains(1));
    assertTrue("contains 2 = True", IntList.EMPTY.cons(1).cons(2).contains(2));
  }
  
  /**
   test int length() function
   */
  void testLength() {
    assertEquals("length = 0", IntList.EMPTY.length(), 0);
    assertEquals("length = 1", IntList.EMPTY.cons(1).length(), 1);
    assertEquals("length = 2", IntList.EMPTY.cons(1).cons(2).length(), 2);
    assertEquals("length = 3", IntList.EMPTY.cons(1).cons(2).cons(3).length(), 3);
  }
  
  /**
   test int sum() function
   */
  void testSum() {
    assertEquals("sum = 0", IntList.EMPTY.sum(), 0);
    assertEquals("sum = 1", IntList.EMPTY.cons(1).sum(), 1);
    assertEquals("sum = 3", IntList.EMPTY.cons(1).cons(2).sum(), 3);
    assertEquals("sum = 6", IntList.EMPTY.cons(1).cons(2).cons(3).sum(), 6);
  }
  
  /**
   test double average() function
   */
  void testAverage() {
    assertEquals("average = 0", (int) IntList.EMPTY.average(), 0);
    assertEquals("average = 1", (int) IntList.EMPTY.cons(1).average(), 1);
    assertEquals("average = 2", (int) IntList.EMPTY.cons(1).cons(3).average(), 2);
    assertEquals("average = 3", (int) IntList.EMPTY.cons(1).cons(2).cons(6).average(), 3);
  }
  
  /**
   test IntList notGreaterThan(int bound) function
   */
  void testNotGreaterThan() {
    assertEquals("not greater than 0 length = 0", IntList.EMPTY.notGreaterThan(0).length(), 0);
    assertEquals("not greater than 0 length = 0", IntList.EMPTY.cons(1).notGreaterThan(0).length(), 0);
    assertFalse("not greater than 0 contains 1 = False", IntList.EMPTY.cons(1).notGreaterThan(0).contains(1));
    assertEquals("not greater than 1 length = 1", IntList.EMPTY.cons(1).notGreaterThan(1).length(), 1);
    assertTrue("not greater than 1 contains 1 = True", IntList.EMPTY.cons(1).notGreaterThan(1).contains(1));
    assertEquals("not greater than 0 length = 0", IntList.EMPTY.cons(1).cons(2).notGreaterThan(0).length(), 0);
    assertFalse("not greater than 0 contains 1 = False", IntList.EMPTY.cons(1).cons(2).notGreaterThan(0).contains(1));
    assertFalse("not greater than 0 contains 2 = False", IntList.EMPTY.cons(1).cons(2).notGreaterThan(0).contains(2));
    assertEquals("not greater than 1 length = 1", IntList.EMPTY.cons(1).cons(2).notGreaterThan(1).length(), 1);
    assertTrue("not greater than 1 contains 1 = True", IntList.EMPTY.cons(1).cons(2).notGreaterThan(1).contains(1));
    assertFalse("not greater than 1 contains 2 = False", IntList.EMPTY.cons(1).cons(2).notGreaterThan(1).contains(2));
    assertEquals("not greater than 2 length = 2", IntList.EMPTY.cons(1).cons(2).notGreaterThan(2).length(), 2);
    assertTrue("not greater than 1 contains 1 = True", IntList.EMPTY.cons(1).cons(2).notGreaterThan(2).contains(1));
    assertTrue("not greater than 1 contains 2 = True", IntList.EMPTY.cons(1).cons(2).notGreaterThan(2).contains(2));
  }
  
  /**
   test IntList remove(int key) function
   */
  void testRemove() {
    assertEquals("remove 0 length = 0", IntList.EMPTY.remove(0).length(), 0);
    assertEquals("remove 0 length = 1", IntList.EMPTY.cons(1).remove(0).length(), 1);
    assertTrue("remove 0 contains 1 = True", IntList.EMPTY.cons(1).remove(0).contains(1));
    assertEquals("remove 1 length = 0", IntList.EMPTY.cons(1).remove(1).length(), 0);
    assertFalse("remove 1 contains 1 = False", IntList.EMPTY.cons(1).remove(1).contains(1));
    assertEquals("remove 0 length = 2", IntList.EMPTY.cons(1).cons(2).remove(0).length(), 2);
    assertTrue("remove 0 contains 1 = True", IntList.EMPTY.cons(1).cons(2).remove(0).contains(1));
    assertTrue("remove 0 contains 2 = True", IntList.EMPTY.cons(1).cons(2).remove(0).contains(2));
    assertEquals("remove 1 length = 1", IntList.EMPTY.cons(1).cons(2).remove(1).length(), 1);
    assertFalse("remove 1 contains 1 = False", IntList.EMPTY.cons(1).cons(2).remove(1).contains(1));
    assertTrue("remove 1 contains 2 = True", IntList.EMPTY.cons(1).cons(2).remove(1).contains(2));
  }
  
  /**
   test IntList subst(int oldN, int newN) function
   */
  void testSubst() {
    assertEquals("replace 0 with 1 length = 0", IntList.EMPTY.subst(0, 1).length(), 0);
    assertEquals("replace 0 with 1 length = 1", IntList.EMPTY.cons(1).subst(0, 1).length(), 1);
    assertTrue("replace 0 with 1 contains 1 = True", IntList.EMPTY.cons(1).subst(0, 1).contains(1));
    assertEquals("replace 1 with 2 length = 1", IntList.EMPTY.cons(1).subst(1, 2).length(), 1);
    assertTrue("replace 1 with 2 contains 2 = True", IntList.EMPTY.cons(1).subst(1, 2).contains(2));
    assertEquals("replace 0 with 1 length = 2", IntList.EMPTY.cons(1).cons(2).subst(0, 1).length(), 2);
    assertTrue("replace 0 with 1 contains 1 = True", IntList.EMPTY.cons(1).cons(2).subst(0, 1).contains(1));
    assertTrue("replace 0 with 1 contains 2 = True", IntList.EMPTY.cons(1).cons(2).subst(0, 1).contains(2));
    assertEquals("replace 1 with 3 length = 2", IntList.EMPTY.cons(1).cons(2).subst(1, 3).length(), 2);
    assertTrue("replace 1 with 3 contains 2 = True", IntList.EMPTY.cons(1).cons(2).subst(1, 3).contains(2));
    assertTrue("replace 1 with 3 contains 3 = True", IntList.EMPTY.cons(1).cons(2).subst(1, 3).contains(3));
  }
  
  /**
   test IntList mergeHelp(ConsIntList other) function
   */
  void testMergeHelp() {
    assertEquals("test merge help", IntList.EMPTY.mergeHelp(IntList.EMPTY.cons(5).cons(3).cons(1)), 
                 IntList.EMPTY.cons(5).cons(3).cons(1));
    assertEquals("test merge help", IntList.EMPTY.mergeHelp(IntList.EMPTY.cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(6).cons(4).cons(2));
    assertEquals("test merge help", IntList.EMPTY.cons(5).cons(3).cons(1).mergeHelp(IntList.EMPTY.cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(6).cons(5).cons(4).cons(3).cons(2).cons(1));
    assertEquals("test merge help", IntList.EMPTY.cons(7).cons(5).cons(3).cons(1).mergeHelp(IntList.EMPTY.cons(8).cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(8).cons(7).cons(6).cons(5).cons(4).cons(3).cons(2).cons(1));
  }
  
  /**
   test IntList merge(IntList other) function
   */
  void testMerge() {
    assertEquals("test merge", IntList.EMPTY.merge(IntList.EMPTY.cons(5).cons(3).cons(1)), 
                 IntList.EMPTY.cons(5).cons(3).cons(1));
    assertEquals("test merge", IntList.EMPTY.merge(IntList.EMPTY.cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(6).cons(4).cons(2));
    assertEquals("test merge", IntList.EMPTY.cons(5).cons(3).cons(1).merge(IntList.EMPTY), 
                 IntList.EMPTY.cons(5).cons(3).cons(1));
    assertEquals("test merge", IntList.EMPTY.cons(6).cons(4).cons(2).merge(IntList.EMPTY), 
                 IntList.EMPTY.cons(6).cons(4).cons(2));
    assertEquals("test merge", IntList.EMPTY.cons(5).cons(3).cons(1).merge(IntList.EMPTY.cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(6).cons(5).cons(4).cons(3).cons(2).cons(1));
    assertEquals("test merge", IntList.EMPTY.cons(7).cons(5).cons(3).cons(1).merge(IntList.EMPTY.cons(8).cons(6).cons(4).cons(2)), 
                 IntList.EMPTY.cons(8).cons(7).cons(6).cons(5).cons(4).cons(3).cons(2).cons(1));
  }

}